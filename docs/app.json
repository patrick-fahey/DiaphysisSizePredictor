[{"name":"app.R","content":"library(shiny)\r\nlibrary(shinythemes)\r\nlibrary(tidyverse)\r\n\r\nload(\"Data/linearmodel.RData\")  # Ensure this file exists in the app directory\r\n\r\n# ------------------ Define UI for data upload app -----------------\r\nui <- fluidPage(theme = shinytheme(\"yeti\"),\r\n  titlePanel(\"Predicting Size\"),\r\n  \r\n  navbarPage(\"\", \r\n             tabPanel(\"Process Data\", \r\n                      sidebarLayout(\r\n                        sidebarPanel(\r\n                          fileInput(\"file1\", \"Choose CSV File\",\r\n                                    multiple = FALSE,\r\n                                    accept = c(\"text/csv\",\r\n                                               \"text/comma-separated-values,text/plain\",\r\n                                               \".csv\")),\r\n                          \r\n                          radioButtons(\"sep\", \"Separator\",\r\n                                       choices = c(Comma = \",\",\r\n                                                   Semicolon = \";\",\r\n                                                   Tab = \"\\t\"),\r\n                                       selected = \",\"),\r\n                          \r\n                          tags$hr(),\r\n                          \r\n                          radioButtons(\"measuretype\", \"Thickness Measures\",\r\n                                       choices = c(`Min and Max` = \"MinMax\",\r\n                                                   Average = \"Avg\")),\r\n                          \r\n                          conditionalPanel(\r\n                            condition = \"input.measuretype == 'MinMax'\",\r\n                            textInput(\"MaxId\", \"Max Column Name\", value = \"\"),\r\n                            textInput(\"MinId\", \"Min Column Name\", value = \"\")\r\n                          ),\r\n                          \r\n                          conditionalPanel(\r\n                            condition = \"input.measuretype == 'Avg'\",\r\n                            textInput(\"AvgId\", \"Avg Column Name\", value = \"\")\r\n                          ),\r\n                          \r\n                          actionButton(\"process_data\", \"Process Data\"), # Button to modify the dataframe\r\n                          tags$hr(),\r\n                          \r\n                          downloadButton(\"download_data\", \"Download Processed Data\")\r\n                          \r\n                        ), #end sidebar\r\n                        \r\n                        mainPanel(\r\n                          tableOutput(\"contents\")\r\n                        )\r\n                      ) #end sidebar\r\n             ), # end process data\r\n             \r\n             \r\n             tabPanel(\"Visualization\",\r\n                      sidebarLayout(\r\n                        sidebarPanel(\r\n                          checkboxInput(\"use_intervals\", \"Use Interval Classes\", value = FALSE),\r\n                          \r\n                          tags$hr(),\r\n                          \r\n                          checkboxInput(\"use_strat_checkbox\", \"Use Strat Units\", value = FALSE),\r\n                          \r\n                          \r\n                          conditionalPanel(\r\n                            condition = \"input.use_strat_checkbox == true\",\r\n                            textInput(\"StratID\", \"Strat Unit Column Name\", value = \"\", placeholder = \"Enter column name\"),\r\n                            textInput(\"StratOrderID\", \"Choose Units and Order\", value = \"\", placeholder = \"List units in order, separated with comma\")\r\n                            \r\n                          ), #end strat conditional\r\n                          \r\n                          tags$hr(),\r\n                          \r\n                          numericInput(\"plot_width\", \"Plot Width (mm)\", value = 190, min = 4, max = 1000),\r\n                          numericInput(\"plot_height\", \"Plot Height (mm)\", value = 100, min = 4, max = 1000),\r\n                          downloadButton(\"download_plot\", \"Download Plot\"),\r\n                        ), #end sidebar\r\n                        \r\n                        mainPanel(\r\n                          plotOutput(\"size_distribution_plot\")\r\n                        ) # end main panel\r\n                      ) # end sidebar\r\n             ), # end Viz\r\n             \r\n             \r\n             tabPanel(\"Instructions\",  # New tab for instructions\r\n                      fluidPage(\r\n                        h2(\"How to Use This App\"),\r\n                        p(\"This app allows you to predict body mass and size class on diaphysis faunal specimens.\"),\r\n                        tags$hr(),\r\n                        h3(\"Process Data Page\"),\r\n                        p(\"Follow these steps:\"),\r\n                        tags$ol(\r\n                          tags$li(\"Choose CSV File: Click\", tags$b(\"Browse\") ,\"to upload specimen database as a CSV file, specifying the type of separator your file uses. Most CSVs are comma separated.\"),\r\n                          tags$li(\"Thickness Measures: Select the method in which cortical thickness was measured.\",\r\n                                  tags$ul(  # This creates the sub-list\r\n                                    tags$li(\"Min and Max: 2 measures were taken per specimen (approximate min and max).\"),\r\n                                    tags$li(\"Average: 1 thickness was taken per specimen (approximate average).\")\r\n                                  )\r\n                          ),\r\n                          tags$li(\"Enter Column Names: Enter the relevant column name exactly as it appears in the database.\"),\r\n                          tags$li(\"Click\", tags$b(\"Process Data\")),\r\n                          tags$li(\"View the first 10 columns and 30 rows of the processed database to ensure size class and body mass were calculated.\"),\r\n                          tags$li(\"Click\", tags$b(\"Download Processed Data\"), \" to save the new database to your computer.\")\r\n                        ),\r\n                        \r\n                        # Add horizontal rule and new section for Visualization Page\r\n                        tags$hr(),\r\n                        h3(\"Visualization Page\"),\r\n                        p(\"After data is processed on the\", tags$b(\"Process Data\"), \" page, a relative frequency bar chart of prey sizes will be generated and available for download.\"),\r\n                        p(\"Follow these steps:\"),\r\n                        tags$ol(\r\n                        tags$li(\"Use Interval Classes: when selected, will use an interval class system in which specimens that have their assigned size class probability below 75% are assigned to an intermediate class between adjacent size classes.\"),\r\n                        tags$li(\"Use Strat Units: When selected, the plot will be split by stratigraphic units or other grouping variables.\",\r\n                                tags$ul(\r\n                                  tags$li(\"Strat Unit Column Name: Enter the relevant column name exactly as it appears in the database.\"),\r\n                                  tags$li(\"Choose Units and Order: List the strat units you want included in the order you want them to appear,\", tags$i(\"seperated by commas.\"), \" Any unit not included will be omitted.\")\r\n                                ),\r\n                                ),\r\n                        tags$li(\"Export Plot:\",\r\n                          tags$ul(\r\n                            tags$li(\"Plot Width (mm): enter the desired width in mm for exported plot.\"), \r\n                            tags$li(\"Plot Height (mm): enter the desired height in mm for exported plot.\"),\r\n                            tags$li(\"Click\", tags$b(\"Download Plot.\"))\r\n                        ),\r\n                        ),\r\n                        ),\r\n                        \r\n                        tags$hr(),\r\n                        p(\"For questions, contact: bpfahey@asu.com\")\r\n                      )\r\n             )\r\n             \r\n             \r\n  ) # end navbar\r\n  \r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n# ------------------- Function for classification probabilities -------------------\r\npredict_class_probs <- function(AvgThickness) {\r\n  # Hard-coded model parameters\r\n  beta <- 12.98\r\n  thresholds <- c(11.71, 21.28, 26.76, 32.91)  # 1|2, 2|3, 3|4, 4|5\r\n  \r\n  # Log-transform X as per model\r\n  X <- log(AvgThickness)\r\n  \r\n  # Compute cumulative probabilities P(Y â‰¤ j)\r\n  cum_probs <- 1 / (1 + exp(-(thresholds - beta * X)))\r\n  \r\n  # Compute individual class probabilities\r\n  p1 <- cum_probs[1]\r\n  p2 <- cum_probs[2] - cum_probs[1]\r\n  p3 <- cum_probs[3] - cum_probs[2]\r\n  p4 <- cum_probs[4] - cum_probs[3]\r\n  p5 <- 1 - cum_probs[4]\r\n  \r\n  # Return named list\r\n  return(c(p1, p2, p3, p4, p5))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# ------------------- Define server logic -------------------\r\nserver <- function(input, output, session) {\r\n  \r\n  # Reactive value to store the uploaded and modified dataframe\r\n  processed_data <- reactiveVal(NULL)\r\n  \r\n  observeEvent(input$process_data, {\r\n    req(input$file1)  # Ensure a file is uploaded\r\n    \r\n    \r\n    \r\n    df <- tryCatch({\r\n      read.csv(input$file1$datapath,\r\n               header = TRUE,\r\n               fill = TRUE,\r\n               sep = input$sep,\r\n               quote = '\"',\r\n               fileEncoding = \"UTF-8\", \r\n               stringsAsFactors = FALSE)  # Avoid converting strings to factors\r\n    }, error = function(e) {\r\n      stop(safeError(e))\r\n    })\r\n    \r\n    \r\n    \r\n    \r\n    # Rename columns based on user input\r\n    if (input$measuretype == \"MinMax\") {\r\n      req(input$MaxId, input$MinId)  # Ensure inputs are provided\r\n      \r\n      df <- df %>%\r\n        rename(MaxThickness = !!sym(input$MaxId), MinThickness = !!sym(input$MinId)) %>%\r\n        mutate(AvgThickness = (MaxThickness + MinThickness) / 2) # Compute AvgThickness\r\n    } else if (input$measuretype == \"Avg\") {\r\n      req(input$AvgId)\r\n      \r\n      df <- df %>%\r\n        rename(AvgThickness = !!sym(input$AvgId))\r\n    }\r\n    \r\n    \r\n    \r\n    # Compute class probabilities and store as new columns\r\n    probs_df <- as.data.frame(t(apply(df[\"AvgThickness\"], 1, predict_class_probs)))\r\n    colnames(probs_df) <- c(\"1_ClassProb\", \"2_ClassProb\", \"3_ClassProb\", \"4_ClassProb\", \"5_ClassProb\")\r\n    \r\n    # Combine probability columns with original data (add to the end of df)\r\n    df <- bind_cols(df, probs_df)\r\n    \r\n    \r\n    \r\n    #---------------- Assign size class based on POLR\r\n    df <- df %>%\r\n      mutate(\r\n        #Get highest probability\r\n        SizeClass = as.character(max.col(select(., ends_with(\"_ClassProb\")), ties.method = \"first\")),\r\n        SizeClass_prob = pmax(`1_ClassProb`, `2_ClassProb`, `3_ClassProb`, `4_ClassProb`, `5_ClassProb`),\r\n        # Get second highest probability\r\n        SizeClass_2nd = as.character(max.col(select(., ends_with(\"_ClassProb\")) * \r\n                                               (select(., ends_with(\"_ClassProb\")) != SizeClass_prob),\r\n                                             ties.method = \"first\")),\r\n        # If prob < 0.75, concatenate top two; otherwise, just keep the top one\r\n        SizeClass_interval = ifelse(SizeClass_prob < 0.75, \r\n                                    paste0(pmin(SizeClass, SizeClass_2nd), \"-\", pmax(SizeClass, SizeClass_2nd)), \r\n                                    SizeClass)\r\n      )\r\n    \r\n    \r\n    #---------------- Predict body mass\r\n    # Create a new dataframe with log(AvgThickness)\r\n    new_data <- df %>%\r\n      mutate(AvgAll_log = log(AvgThickness))\r\n    \r\n    # Get prediction intervals\r\n    pred_intervals <- predict(linearmodel, newdata = new_data, interval = \"prediction\")\r\n    \r\n    # Convert predictions back to normal scale (exponentiate)\r\n    df <- df %>%\r\n      mutate(\r\n        BodyMassln = pred_intervals[, \"fit\"],  # Predicted log(BodyMass)\r\n        BodyMass = exp(BodyMassln),\r\n        BodyMass_lwrPI = exp(pred_intervals[, \"lwr\"]),  # Lower bound\r\n        BodyMass_uprPI = exp(pred_intervals[, \"upr\"]),  # Upper bound\r\n        BodyMass_corrected = BodyMass * 1.2\r\n      )\r\n    \r\n    # Remove unecessary columns\r\n    df <- df %>% select(-BodyMassln, -SizeClass_2nd)\r\n    \r\n    # Rearange columns\r\n    df <- df %>%\r\n      select(\r\n        1,  # Keep the first column in the original dataframe as the first\r\n        \r\n        SizeClass, SizeClass_prob, SizeClass_interval, BodyMass, BodyMass_lwrPI, BodyMass_uprPI, AvgThickness, everything()  # Reorder the rest\r\n      )\r\n    \r\n    # Store modified dataframe in reactive value\r\n    processed_data(df)\r\n  })\r\n  \r\n  output$contents <- renderTable({\r\n    req(processed_data()) # Ensure processed data exists\r\n    df <- processed_data()\r\n    \r\n    # Select only the first 5 columns (modify as needed)\r\n    df[, 1:min(10, ncol(df))]\r\n  })\r\n  \r\n  \r\n  \r\n  # ========================== Download button ==========================\r\n  \r\n  # Function to handle file download\r\n  output$download_data <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"processed_data_\", Sys.Date(), \".csv\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      req(processed_data())  # Ensure there is data to download\r\n      df <- processed_data()\r\n      \r\n      # Format SizeClass_interval so Excel treats it as text\r\n      df$SizeClass_interval <- paste0(\"=\\\"\", df$SizeClass_interval, \"\\\"\")\r\n      \r\n      write.csv(df, file, row.names = FALSE, quote = FALSE)  # Disable auto-quoting\r\n    }\r\n  )\r\n  \r\n  \r\n  # -------------------------- Strat unit code\r\n  \r\n  updated_data <- reactive({\r\n    df <- processed_data()\r\n    req(df)\r\n    \r\n    # Assign StratUnit based on checkbox\r\n    if (input$use_strat_checkbox && input$StratID %in% colnames(df)) {\r\n      \r\n      df <- df %>%\r\n        mutate(StratUnit = .data[[input$StratID]])\r\n      \r\n      # Process StratOrderID input\r\n      if (input$StratOrderID != \"\") {\r\n        strat_levels <- unlist(strsplit(input$StratOrderID, \"\\\\s*,\\\\s*\"))  # Split by commas and trim spaces\r\n        \r\n        # Temporarily treat unlisted values as NA\r\n        df <- df %>%\r\n          mutate(StratUnit = ifelse(StratUnit %in% strat_levels, StratUnit, NA_character_)) %>%\r\n          mutate(StratUnit = factor(StratUnit, levels = strat_levels))  # Set factor levels\r\n        \r\n        # Explicitly drop NA levels\r\n        df <- df %>% filter(!is.na(StratUnit))\r\n      }\r\n    } else {\r\n      df <- df %>%\r\n        mutate(StratUnit = \"All\")\r\n    }\r\n    \r\n    df\r\n  })\r\n  \r\n  \r\n  \r\n  # ========================== Render Plot ==========================\r\n  output$size_distribution_plot <- renderPlot({\r\n    df <- updated_data()\r\n    req(df)\r\n    \r\n    # Exclude NA values from plotting\r\n    df <- df \r\n    \r\n    default_colors_5 <- c(\"#6b50b0\", \"#d1495b\", \"#DAA520\", \"#66a182\", \"#00798c\")\r\n    default_colors_5interval <- c(\"#6b50b0\", \"#9E4D86\", \"#d1495b\", \"#D6773E\", \"#DAA520\",\"#A0A351\", \"#66a182\", \"#338D87\", \"#00798c\")\r\n    \r\n    # Determine fill variable and color scale based on checkbox state\r\n    fill_var <- if (input$use_intervals) \"SizeClass_interval\" else \"SizeClass\"\r\n    fill_colors <- if (input$use_intervals) default_colors_5interval else default_colors_5\r\n    \r\n    # Calculate sample sizes\r\n    sample_sizes <- df %>%\r\n      count(StratUnit)\r\n    \r\n    df %>% filter(!is.na(StratUnit)) %>%\r\n      ggplot(aes_string(fill = fill_var, y = 1, x = \"StratUnit\")) +  # Use aes_string() for dynamic variable\r\n      geom_bar(position = \"fill\", stat = \"identity\") +\r\n      scale_fill_manual(values = fill_colors) +\r\n      coord_flip() +\r\n      labs(y = \"Frequency\", x = \"\", fill = \"Size Class\") +\r\n      scale_y_reverse(limits = c(1, -0.05)) +  \r\n      geom_text(data = sample_sizes, \r\n                aes(x = StratUnit, y = -0.01, label = paste0(\"\", n)), \r\n                inherit.aes = FALSE,\r\n                hjust = 0,\r\n                size = 5) +\r\n      theme_minimal()+\r\n      theme(\r\n        axis.text.x = element_text(size = 10),  # X-axis text size\r\n        axis.text.y = element_text(size = 10),  # Y-axis text size\r\n        axis.title.x = element_text(size = 10),  # X-axis title\r\n        axis.title.y = element_text(size = 10),  # Y-axis title\r\n        legend.text = element_text(size = 11),  # Legend text size\r\n        legend.title = element_text(size = 12, face = \"bold\"),\r\n        panel.grid.major.y = element_blank(),  \r\n        panel.grid.minor.y = element_blank()# Legend title size\r\n      )\r\n  })\r\n  \r\n  \r\n  # ------------------ Export plot -------------------------#\r\n  output$download_plot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"size_distribution_plot_\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      df <- updated_data()\r\n      req(df)\r\n      \r\n      # Determine fill variable and color scale based on checkbox state\r\n      fill_var <- if (input$use_intervals) \"SizeClass_interval\" else \"SizeClass\"\r\n      fill_colors <- if (input$use_intervals) default_colors_5interval else default_colors_5\r\n      \r\n      # Calculate sample sizes\r\n      sample_sizes <- df %>%\r\n        count(StratUnit)\r\n      \r\n      # Create the ggplot object\r\n      p <- df %>% filter(!is.na(StratUnit)) %>%\r\n        ggplot(aes_string(fill = fill_var, y = 1, x = \"StratUnit\")) +\r\n        geom_bar(position = \"fill\", stat = \"identity\") +\r\n        scale_fill_manual(values = fill_colors) +\r\n        coord_flip() +\r\n        labs(y = \"Frequency\", x = \"\", fill = \"Size Class\") +\r\n        scale_y_reverse(limits = c(1, -0.05)) +\r\n        geom_text(data = sample_sizes, \r\n                  aes(x = StratUnit, y = -0.01, label = paste0(\"\", n)), \r\n                  inherit.aes = FALSE,\r\n                  hjust = 0,\r\n                  size = 6) +\r\n        theme_minimal() +\r\n        theme(\r\n          axis.text.x = element_text(size = 10),  # X-axis text size\r\n          axis.text.y = element_text(size = 10),  # Y-axis text size\r\n          axis.title.x = element_text(size = 10),  # X-axis title\r\n          axis.title.y = element_text(size = 10),  # Y-axis title\r\n          legend.text = element_text(size = 12),  # Legend text size\r\n          legend.title = element_text(size = 11, face = \"bold\"),  # Legend title size\r\n          panel.grid.major.y = element_blank(),  \r\n          panel.grid.minor.y = element_blank()\r\n        )\r\n      \r\n      # Save plot as PNG with user-defined dimensions\r\n      ggsave(file, plot = p, width = input$plot_width, height = input$plot_height, dpi = 300, units = \"mm\")\r\n    }\r\n  )\r\n  \r\n} # End Server\r\n\r\n\r\n# ------------------- Create Shiny app -------------------\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"Data/linearmodel.RData","content":"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\nryxJ8eNfq/6XXf3XVYrfR/P/A/z29e60dQAA","type":"binary"}]
